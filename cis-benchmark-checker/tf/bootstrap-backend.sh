#!/bin/bash
# Bootstrap script to create S3 backend infrastructure
# This script creates the S3 bucket and DynamoDB table needed for Terraform backend

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
AWS_REGION=${AWS_REGION:-us-east-1}
ENVIRONMENT=${ENVIRONMENT:-dev}

echo -e "${BLUE}🚀 Bootstrapping Terraform S3 Backend Infrastructure${NC}"
echo "Region: ${AWS_REGION}"
echo "Environment: ${ENVIRONMENT}"

# Get AWS account ID
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
echo "Account ID: ${ACCOUNT_ID}"

# Generate unique bucket name
BUCKET_NAME="cis-benchmark-terraform-state-${ACCOUNT_ID}-${AWS_REGION}"
DYNAMODB_TABLE="cis-benchmark-terraform-locks"

echo -e "\n${YELLOW}📦 Creating S3 bucket: ${BUCKET_NAME}${NC}"

# Create S3 bucket
if aws s3api head-bucket --bucket "${BUCKET_NAME}" 2>/dev/null; then
    echo -e "${GREEN}✅ S3 bucket ${BUCKET_NAME} already exists${NC}"
else
    echo "Creating S3 bucket..."
    if [ "${AWS_REGION}" = "us-east-1" ]; then
        aws s3api create-bucket --bucket "${BUCKET_NAME}"
    else
        aws s3api create-bucket --bucket "${BUCKET_NAME}" --create-bucket-configuration LocationConstraint="${AWS_REGION}"
    fi
    echo -e "${GREEN}✅ S3 bucket created successfully${NC}"
fi

# Enable versioning
echo "Enabling versioning..."
aws s3api put-bucket-versioning \
    --bucket "${BUCKET_NAME}" \
    --versioning-configuration Status=Enabled

# Enable encryption
echo "Enabling encryption..."
aws s3api put-bucket-encryption \
    --bucket "${BUCKET_NAME}" \
    --server-side-encryption-configuration '{
        "Rules": [
            {
                "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                }
            }
        ]
    }'

# Block public access
echo "Blocking public access..."
aws s3api put-public-access-block \
    --bucket "${BUCKET_NAME}" \
    --public-access-block-configuration \
        BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

# Add bucket policy for additional security
echo "Adding bucket policy..."
cat > /tmp/bucket-policy.json << EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "DenyInsecureConnections",
            "Effect": "Deny",
            "Principal": "*",
            "Action": "s3:*",
            "Resource": [
                "arn:aws:s3:::${BUCKET_NAME}",
                "arn:aws:s3:::${BUCKET_NAME}/*"
            ],
            "Condition": {
                "Bool": {
                    "aws:SecureTransport": "false"
                }
            }
        }
    ]
}
EOF

aws s3api put-bucket-policy --bucket "${BUCKET_NAME}" --policy file:///tmp/bucket-policy.json
rm /tmp/bucket-policy.json

echo -e "\n${YELLOW}🔒 Creating DynamoDB table: ${DYNAMODB_TABLE}${NC}"

# Create DynamoDB table for state locking
if aws dynamodb describe-table --table-name "${DYNAMODB_TABLE}" --region "${AWS_REGION}" >/dev/null 2>&1; then
    echo -e "${GREEN}✅ DynamoDB table ${DYNAMODB_TABLE} already exists${NC}"
else
    echo "Creating DynamoDB table..."
    aws dynamodb create-table \
        --table-name "${DYNAMODB_TABLE}" \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST \
        --region "${AWS_REGION}" \
        --tags Key=Project,Value=CIS-Benchmark-Testing Key=Environment,Value="${ENVIRONMENT}" Key=Purpose,Value=TerraformStateLocking

    echo "Waiting for table to become active..."
    aws dynamodb wait table-exists --table-name "${DYNAMODB_TABLE}" --region "${AWS_REGION}"
    echo -e "${GREEN}✅ DynamoDB table created successfully${NC}"
fi

# Generate backend configuration
echo -e "\n${YELLOW}📝 Generating backend configuration${NC}"

# Create backend.tf with the actual configuration
cat > backend.tf << EOF
# Terraform S3 Backend Configuration
# Generated by bootstrap-backend.sh

terraform {
  backend "s3" {
    bucket         = "${BUCKET_NAME}"
    key            = "cis-benchmark-testing/terraform.tfstate"
    region         = "${AWS_REGION}"
    dynamodb_table = "${DYNAMODB_TABLE}"
    encrypt        = true
    
    # Optional: Add server-side encryption with KMS
    # kms_key_id = "arn:aws:kms:${AWS_REGION}:${ACCOUNT_ID}:key/YOUR-KMS-KEY-ID"
  }
}
EOF

echo -e "${GREEN}✅ Backend configuration created: backend.tf${NC}"

# Create a summary file for GitHub Actions
cat > backend-info.json << EOF
{
    "bucket_name": "${BUCKET_NAME}",
    "dynamodb_table": "${DYNAMODB_TABLE}",
    "region": "${AWS_REGION}",
    "account_id": "${ACCOUNT_ID}",
    "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF

echo -e "\n${GREEN}🎉 Backend infrastructure created successfully!${NC}"
echo -e "${BLUE}📋 Summary:${NC}"
echo "  S3 Bucket: ${BUCKET_NAME}"
echo "  DynamoDB Table: ${DYNAMODB_TABLE}"
echo "  Region: ${AWS_REGION}"
echo ""
echo -e "${YELLOW}⚠️  Next Steps:${NC}"
echo "1. Commit the generated backend.tf file"
echo "2. Run 'terraform init' to migrate to remote backend"
echo "3. When prompted about copying state, answer 'yes'"
echo ""
echo -e "${BLUE}💡 To migrate existing state (if any):${NC}"
echo "  terraform init -migrate-state"
