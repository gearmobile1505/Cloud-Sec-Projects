name: Deploy Azure Sentinel KQL Testing Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
  push:
    branches:
      - main
    paths:
      - 'sentinel-kql-queries/terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'sentinel-kql-queries/terraform/**'

env:
  TF_VERSION: '1.5.0'
  WORKING_DIRECTORY: './sentinel-kql-queries/terraform'
  ARM_SKIP_PROVIDER_REGISTRATION: true

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read
  checks: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Setup Terraform Backend Storage
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      run: |
        # Create resource group for Terraform state if it doesn't exist
        az group create --name terraform-state-rg --location "East US" --output none || true
        
        # Create storage account for Terraform state (with unique suffix)
        STORAGE_ACCOUNT_NAME="sentinelkqlstate${{ github.run_number }}"
        echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        
        # Check if storage account exists, create if not
        if ! az storage account show --name $STORAGE_ACCOUNT_NAME --resource-group terraform-state-rg --output none 2>/dev/null; then
          az storage account create \
            --resource-group terraform-state-rg \
            --name $STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --location "East US" \
            --allow-blob-public-access false \
            --https-only true \
            --output none
        fi
        
        # Create container for Terraform state
        az storage container create \
          --name tfstate \
          --account-name $STORAGE_ACCOUNT_NAME \
          --auth-mode login \
          --output none || true
          
    - name: Update Backend Configuration
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      run: |
        # Update backend.tf with the actual storage account name
        sed -i "s/sentinelkqlstate/sentinelkqlstate${{ github.run_number }}/g" backend.tf
        
    - name: Terraform Init
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Create Terraform Variables File
      run: |
        cat > terraform.tfvars << EOF
        project_name = "sentinel-kql-${{ github.event.inputs.environment || 'dev' }}"
        environment = "${{ github.event.inputs.environment || 'dev' }}"
        location = "East US"
        
        tags = {
          Project = "Sentinel KQL Testing"
          Environment = "${{ github.event.inputs.environment || 'dev' }}"
          Owner = "Security Team"
          Purpose = "KQL Query Validation"
          DeployedBy = "GitHub Actions"
          Repository = "${{ github.repository }}"
          RunNumber = "${{ github.run_number }}"
        }
        
        # Cost optimization for automated deployments
        log_analytics_retention_days = 30
        log_analytics_daily_quota_gb = 1
        create_test_vms = true
        vm_size = "Standard_B2s"
        vm_admin_username = "azureuser"
        
        enable_security_center = true
        enable_sentinel = true
        enable_key_vault = true
        enable_network_watcher = true
        enable_vm_insights = true
        enable_flow_logs = false  # Disabled to reduce costs in CI/CD
        enable_auto_shutdown = true
        auto_shutdown_time = "1900"
        
        storage_account_tier = "Standard"
        storage_replication_type = "LRS"
        flow_logs_retention_days = 7
        
        create_sample_analytics_rules = true
        EOF
        
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false -out=tfplan 2>&1 | tee plan_output.txt
        echo "plan-exitcode=$?" >> $GITHUB_OUTPUT
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          const planFile = path.join('${{ env.WORKING_DIRECTORY }}', 'plan_output.txt');
          
          try {
            const plan = fs.readFileSync(planFile, 'utf8');
            const maxLength = 65000;
            const truncatedPlan = plan.length > maxLength ? 
              plan.substring(0, maxLength) + '\n\n... (truncated)' : plan;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan for Azure Sentinel KQL Testing Infrastructure
              
              <details>
              <summary>Show Plan</summary>
              
              \`\`\`terraform
              ${truncatedPlan}
              \`\`\`
              </details>
              
              **Environment:** ${{ github.event.inputs.environment || 'dev' }}
              **Action:** Plan Only`
            });
          } catch (error) {
            console.log('Error reading plan file:', error);
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan for Azure Sentinel KQL Testing Infrastructure
              
              ❌ **Error:** Could not read terraform plan output.
              
              Please check the workflow logs for details.
              
              **Environment:** ${{ github.event.inputs.environment || 'dev' }}
              **Action:** Plan Only`
            });
          }
          
    - name: Display Plan Output
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan'
      run: |
        echo "## 📋 Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Action:** Plan Only" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Plan Output:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`terraform" >> $GITHUB_STEP_SUMMARY
        if [ -f "plan_output.txt" ]; then
          head -100 plan_output.txt >> $GITHUB_STEP_SUMMARY
          if [ $(wc -l < plan_output.txt) -gt 100 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "... (output truncated - see full logs above)" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "Plan output file not found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Plan completed successfully!** Review the changes above." >> $GITHUB_STEP_SUMMARY
        
    - name: Terraform Apply
      if: (github.event.inputs.action == 'apply' || github.event_name == 'push') && github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        TF_VAR_project_name: "sentinel-kql-${{ github.event.inputs.environment || 'dev' }}"
        TF_VAR_environment: "${{ github.event.inputs.environment || 'dev' }}"
        TF_VAR_location: "East US"
        
    - name: Output Terraform Results
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      run: |
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        terraform output -no-color >> $GITHUB_STEP_SUMMARY
        
    - name: Save Terraform Outputs
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      run: |
        terraform output -json > terraform_outputs.json
        
    - name: Upload Terraform Outputs
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-${{ github.event.inputs.environment || 'dev' }}-${{ github.run_number }}
        path: ${{ env.WORKING_DIRECTORY }}/terraform_outputs.json
        retention-days: 30
        
    - name: Post-deployment validation
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      run: |
        echo "🎉 Azure Sentinel KQL Testing Infrastructure deployed successfully!"
        echo ""
        echo "Next Steps:"
        echo "1. Access your Sentinel workspace using the URLs from outputs"
        echo "2. Wait 10-15 minutes for initial data ingestion"
        echo "3. Test KQL queries in Log Analytics workspace"
        echo "4. Review the sample analytics rules in Sentinel"
        echo ""
        echo "⚠️  Remember: This infrastructure incurs costs (~$35-75/month)"
        echo "Use the 'destroy' action when testing is complete"
        
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Security Scan with Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ env.WORKING_DIRECTORY }}
        framework: terraform
        output_format: sarif
        output_file_path: checkov-report.sarif
        
    - name: Upload Checkov Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-report.sarif
